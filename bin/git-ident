#!/bin/sh -e

GIT_IDENT_CONFIG_PATH="~/.config/git-ident"
KEY_PATH_PREFIX="~/.ssh/git-ident"

OPTS_SPEC="\
git-ident [options] <command>

Clumsy script for managing various git identities. Commands:

list                                                List available accounts
create <account> <name> <email>                     Create an account
map <account> github|bitbucket <remote-account>     Map account to remote account
init <account>                                      Init repo using account
key <acount>                                        Write out key, and copy to clipboard
regenerate                                          Regenerate keys and config files

--
"

main() {
    GIT_IDENT_CONFIG_FILE_TEXT=${GIT_IDENT_CONFIG_PATH}/identities
    GIT_IDENT_CONFIG_FILE_PATH=$(expand_tilde_path $GIT_IDENT_CONFIG_FILE_TEXT)

    eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt --stop-at-non-option -- "$@" || echo exit $?)"

    while test $# -ne 0
    do
        case "$1" in
            --)
                shift
                break
                ;;
            *)
                break
                ;;
        esac
    done

    case "$1" in
        list)
            shift
            cmd_list "$@"
            ;;
        create)
            shift
            cmd_create "$@"
            ;;
        map)
            shift
            cmd_map "$@"
            ;;
        key)
            shift
            cmd_key "$@"
            ;;
        regen|regenerate)
            shift
            cmd_regenerate "$@"
            ;;
        init)
            shift
            cmd_init "$@"
            ;;
        *)
            echo "Unknown command"
            eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt --stop-at-non-option -- -h)"
    esac
}

cmd_list() {
    git config -f $GIT_IDENT_CONFIG_FILE_PATH -l |
        sed -n 's/^identity\.\(.*\)\..*=.*/\1/p' |
        sort |
        uniq
}

cmd_create() {
    if [ $# -ne 3 ]
    then
        echo "Usage: git-ident create <account> <name> <email>"
        exit 1
    fi

    account=$1
    name=$2
    email=$3

    identify_file_text="${KEY_PATH_PREFIX}-$account"
    identify_file_path=$(expand_tilde_path $identify_file_text)

    if [ -f $identify_file_path ]
    then
        echo "Key already exists, not overwriting"
    else
        ssh-keygen -f $identify_file_path
    fi

    echo "Adding identities to ${GIT_IDENT_CONFIG_FILE_TEXT}"
    mkdir -p ~/.config/git-ident
    git config -f $GIT_IDENT_CONFIG_FILE_PATH "identity.$account.key" "$identify_file_text"
    git config -f $GIT_IDENT_CONFIG_FILE_PATH "identity.$account.public" "$identify_file_text.pub"
    git config -f $GIT_IDENT_CONFIG_FILE_PATH "identity.$account.name" "$name"
    git config -f $GIT_IDENT_CONFIG_FILE_PATH "identity.$account.email" "$email"

    write_config_files
}

generate_keys() {
    for x in $(git config -f $GIT_IDENT_CONFIG_FILE_PATH -l | sed -n 's/^identity\.\(.*\)\.key=\(.*\)/\1!\2/p');
    do
        IFS=!
        set $x
        unset IFS

        account=$1
        identify_file_text=$2
        identify_file_path=$(expand_tilde_path $identify_file_text)

        if [ ! -f $identify_file_path ]
        then
            echo "Generate key for ${account}"
            ssh-keygen -f $identify_file_path
        fi
    done
}

cmd_map() {
    if [ $# -ne 3 ]
    then
        echo "Usage: git-ident map <account> github|bitbucket <remote-account>"
        exit 1
    fi

    account=$1
    service=$2
    remote=$3

    case "$service" in
        github|bitbucket)
            git config -f $GIT_IDENT_CONFIG_FILE_PATH --add "identity.$account.map-$service" "$remote"
            ;;
        *)
            echo "Unknown service: $service"
            exit 1
            ;;
    esac

    write_config_files
}

cmd_key() {
    if [ $# -ne 1 ]
    then
        echo "Usage: git-ident key <account>"
        exit 1
    fi

    account=$1
    public_file_text=$(git config -f $GIT_IDENT_CONFIG_FILE_PATH --get identity.${account}.public)
    public_file_path=$(expand_tilde_path $public_file_text)

    if [ ! -f $public_file_path ]
    then
        echo "Can't find public key for ${account}"
        exit 1
    fi

    echo Key:
    echo
    cat $public_file_path
    echo

    if which pbcopy > /dev/null
    then
        echo "Copying to clipboard using pbcopy"
        cat $public_file_path | pbcopy
    elif which xsel > /dev/null
    then
        echo "Copying to clipboard using xsel"
        cat $public_file_path | xsel --clipboard --input
    elif which xclip > /dev/null
    then
        echo "Copying to clipboard using xclip"
        cat $public_file_path | xclip -selection clipboard
    elif which putclip > /dev/null
    then
        echo "Copying to clipboard using putclip"
        cat $public_file_path | putclip
    else
        echo "Unable to copy to clipboard"
    fi
}

cmd_regenerate() {
    generate_keys
    write_config_files
}

cmd_init() {
    if [ $# -ne 1 ]
    then
        echo "Usage: git-ident init <account>"
        exit 1
    fi

    account=$1

    name=$(git config -f $GIT_IDENT_CONFIG_FILE_PATH --get identity.${account}.name)
    email=$(git config -f $GIT_IDENT_CONFIG_FILE_PATH --get identity.${account}.email)

    echo "Committing as: $name <$email>"

    git config user.email "$email"
    git config user.name "$name"
}

write_config_files() {
    temp_dir=$(mktemp -d -t git-ident-)

    temp_file1=${temp_dir}/ssh_config
    sed '/# BEGIN GIT IDENT CONFIG/,/# END GIT IDENT CONFIG/d' ~/.ssh/config > $temp_file1

    echo '# BEGIN GIT IDENT CONFIG' >> $temp_file1
    echo '#' >> $temp_file1
    echo '# AUTO-GENERATED SETTINGS, DO NOT EDIT' >> $temp_file1

    echo >> $temp_file1

    for x in $(git config -f $GIT_IDENT_CONFIG_FILE_PATH -l | sed -n 's/^identity\.\(.*\)\.key=\(.*\)/\1!\2/p');
    do
        IFS=!
        set $x
        unset IFS

        account=$1
        identify_file_text=$2

        echo "# Keys for git identity ${account}" >> $temp_file1
        echo >> $temp_file1
        echo "Host bitbucket-${account}" >> $temp_file1
        echo "Hostname bitbucket.org" >> $temp_file1
        echo "IdentityFile $identify_file_text" >> $temp_file1
        echo >> $temp_file1
        echo "Host github-${account}" >> $temp_file1
        echo "Hostname github.com" >> $temp_file1
        echo "IdentityFile ${identify_file_text}" >> $temp_file1
        echo >> $temp_file1
    done

    echo '# END GIT IDENT CONFIG' >> $temp_file1

    temp_file2=${temp_dir}/gitconfig
    echo '# AUTO-GENERATED FILE, DO NOT EDIT' >> $temp_file2
    echo >> $temp_file2

    for x in $(git config -f $GIT_IDENT_CONFIG_FILE_PATH -l | sed -n 's/^identity\.\(.*\)\.map-\(.*\)=\(.*\)/\1!\2!\3/p');
    do
        IFS=!
        set $x
        unset IFS

        account=$1
        service=$2
        remote=$3

        case $service in
            github)
                git config -f $temp_file2 "url.git@github-$account:$remote/.insteadOf" "git@github.com:$remote/"
                ;;
            bitbucket)
                git config -f $temp_file2 "url.git@bitbucket-$account:$remote/.insteadOf" "git@bitbucket.org:$remote/"
                ;;
            *)
                echo "Unknown mapped service: $service"
                ;;
        esac
    done

    mv $temp_file1 ~/.ssh/config
    mv $temp_file2 $(expand_tilde_path ${GIT_IDENT_CONFIG_PATH}/gitconfig)
    rmdir $temp_dir
}

expand_tilde_path() {
    # I don't know how to do this in a good way without using bash.
    # So just hack it instead. Although I guess 'eval' is probably
    # safe here.
    #
    # Maybe do something like the setup script and try to find an
    # appropriate program.
    echo $1 | sed "s@^~\/@${HOME}\/@"
}

main "$@"
